# -*- coding: utf-8 -*-
"""p1s2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/114GUWeuaCtE5PFhRHkJW2CtA9knNZQhp
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

dataset1 = pd.read_csv('train.csv')
X_train = dataset1.iloc[ : , :-1].values
y_train = dataset1.iloc[:,-1].values
dataset2 = pd.read_csv('test.csv')
X_test = dataset2.iloc[ : , :-1].values
y_test = dataset2.iloc[:,-1].values

print(X_train.shape)

print(y_train.shape)

print(X_test.shape)

print(y_test.shape)

"""**Standardization of Data**"""

# Standard Scaling
def get_mean(x):
    return np.sum(x,axis=0)/x.shape[0]

def get_std(x):
    return np.std(x,axis =0)

def get_standardized_data(x):
    x_mean = get_mean(x)
    x_dif = x-x_mean
    sigma = get_std(x)
    return x_dif

X_train_standardized = get_standardized_data(X_train)

X_test_standardized = get_standardized_data(X_test)

print(X_test)

print(X_test_standardized)

"""**Normalization of Data**"""

def get_min(X):
  return X.min(axis = 0)

def get_max(X):
  return X.max(axis = 0)

def get_normalized_data(X):
    X_std = (X - get_min(X_train)) / (get_max(X_train) - get_min(X_train))
    return X_std

X_train_normalized = get_normalized_data(X_train)

print(X_train)

print(X_train_normalized)

X_test_normalized = get_normalized_data(X_test)

print(X_test)

print(X_test_normalized)

"""**Stochastic Gradient Descent**"""

import random
def stochastic_gradient_descent(x,y,epochs,learning_rate):
    number_of_features = x.shape[1]
    number_of_samples = x.shape[0]
    norm_x = get_normalized_data(x)
    initial_bias = np.ones((number_of_samples,1))
    norm_x = np.hstack((np.ones((number_of_samples,1)), norm_x))
    w = np.zeros(shape = (number_of_features+1))
    cost_list = []
    epoch_list = []
    for epoch in range(epochs):
      random_index = random.randint(0,number_of_samples-1)
      x_sample = norm_x[random_index]
      y_predicted = np.matmul(x_sample.T,w)
      dif = y[random_index] - y_predicted
      cost = np.mean(dif**2)/2
      w = w + (learning_rate)*(x_sample * dif)
      cost_list.append(cost)
      epoch_list.append(epoch)
    return w,cost_list,epoch_list

w_SGD,cost_list_SGD,epoch_list_SGD = stochastic_gradient_descent(X_train,y_train,100000,0.01)

print(w_SGD)

plt.xlabel("epoch")
plt.ylabel("cost")
plt.plot(epoch_list_SGD,cost_list_SGD)

def check_test_SGD(w,test,y_test):
  norm_x = get_normalized_data(test)
  number_of_samples = test.shape[0]
  norm_x = np.hstack((np.ones((number_of_samples,1)), norm_x))
  y_predicted = np.matmul(norm_x,w)
  error = y_test - y_predicted
  error = error/(len(y_test))
  return error

error_SGD = check_test_SGD(w_SGD,X_test,y_test)

print(np.mean(error_SGD))

"""Batch Gradient Descent"""

def batch_gradient_descent(x,y,epochs,learning_rate):
    number_of_features = x.shape[1]
    number_of_samples = x.shape[0]
    norm_x = get_normalized_data(x)
    initial_bias = np.ones((number_of_samples,1))
    norm_x = np.hstack((np.ones((number_of_samples,1)), norm_x))
    w = np.zeros(shape = (number_of_features+1))
    cost_list = []
    epoch_list = []
    for epoch in range(epochs):
      y_predicted = np.matmul(norm_x,w)
      dif = y - y_predicted
      cost = np.mean(dif**2)/2
      w = w + (learning_rate)*(np.mean(norm_x.T*dif,axis = 1))
      cost_list.append(cost)
      epoch_list.append(epoch)
    return w,cost_list,epoch_list

w_BGD,cost_list_BGD,epoch_list_BGD = batch_gradient_descent(X_train,y_train,100000,0.01)

print(w_BGD)

plt.xlabel("epoch")
plt.ylabel("cost")
plt.plot(epoch_list_BGD,cost_list_BGD)

def check_test_BGD(w,test,y_test):
  norm_x = get_normalized_data(test)
  number_of_samples = test.shape[0]
  norm_x = np.hstack((np.ones((number_of_samples,1)), norm_x))
  y_predicted = np.matmul(norm_x,w)
  error = y_test - y_predicted
  error = error/(len(y_test))
  return error

error_BGD = check_test_BGD(w_BGD,X_test,y_test)

print(np.mean(error_BGD))

"""Batch Size vs Cost """

import random
import math
def mini_batch_gradient_descent(x,y,epochs,batch_size,learning_rate):
    number_of_features = x.shape[1]
    number_of_samples = x.shape[0]
    norm_x = get_normalized_data(x)
    norm_x = np.hstack((np.ones((number_of_samples,1)), norm_x))
    w = np.zeros(shape = (number_of_features+1))
    cost_list = []
    epoch_list = []
    size1 = int(math.floor(number_of_samples*0.2))
    for epoch in range(epochs):
      random_index = random.randint(0,number_of_samples-1)
      idx = np.random.randint(number_of_samples-1, size=batch_size)
      x_sample = norm_x[idx,:]
      y_sample = y[idx]
      y_predicted = np.matmul(x_sample,w)
      dif = y_sample - y_predicted
      cost = np.mean(dif**2)/2
      w = w + (learning_rate)*(np.mean(x_sample.T*dif,axis = 1))
      cost_list.append(cost)
      epoch_list.append(epoch)
    return w,cost_list,epoch_list

def find_cost(x_train,y_train,x_test,y_test,epochs,batch_size,learning_rate):
  w,cost_list,epoch_list = mini_batch_gradient_descent(x_train,y_train,epochs,batch_size,learning_rate)
  norm_x = get_normalized_data(x_test)
  number_of_samples = x_test.shape[0]
  norm_x = np.hstack((np.ones((number_of_samples,1)), norm_x))
  y_pred = np.matmul(norm_x,w)
  dif = y_test-y_pred
  cost = np.mean(dif**2)/2
  return cost

batch_sizes=[1,4,8,16,32,64,128,256,512,1024,X_train.shape[0]]
final_cost=[]
for m in batch_sizes:
  print(m)
  d_mb = find_cost(X_train, y_train, X_test,y_test,10000,m,0.001)
  final_cost.append(d_mb)

plt.plot(batch_sizes,final_cost)
plt.ylabel('cost')
plt.xlabel('batch size')
plt.title("final cost vs batch size")
plt.show()